import java.util.*;
import java.lang.*;

import java.io.*;

// class tuple implements Serializable{ 
//     String elem1="";
//     String elem2="";
//     String elem3="";
//     String elem4="";
//     tuple(String s1,String s2,String s3,String s4){
//         this.elem1=s1;
//         this.elem2=s2;
//         this.elem3=s3;
//         this.elem4=s4;
//     }
// }
class Pass1 {
    Map<String, String> IS= new HashMap<String, String>();
    Map<String, String> AD = new HashMap<String,String>();
    Map<String, String> DS= new HashMap<String, String>();
    static Map<String,Integer> literaltab=new HashMap</*String, Integer*/>();
    static Map<String,Integer> symboltab=new HashMap<String, Integer>();
    Pass1(){
        AD.put("START", "AD 01");
        IS.put("MOVER", "IS 01");
        IS.put("MODEM", "IS 02");
        IS.put("ADD", "IS 03");
        DS.put("DC", "DC 01");
        AD.put("END", "AD 02");
    }
    public static boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
}

    int[] analyze(String s,int l,int littab,int st){
        //String towrite;
        int lc=l;
        int stc=st;
        int ltabc=littab;
        String final1="";
        String temp1="";
        String temp2="";
        String temp3="";
        String label="";
        String instr="";
        String op1="";
        String op2="";
        String colo=":";
        String temp="";
        boolean colonflag=false;
        int hm=0;
        String insprt="bro";
        String op1prt="";
        String labprt="";
        String op2prt="";

        ////////////////////////////////////////////////////////////////
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)==colo.charAt(0)){
                colonflag=true;
            }
        }
        //int i=0;
        if(colonflag==true){
            String[] tokens = s.split(":");
            label=tokens[0];
            temp=tokens[1];
            symboltab.replace(label,lc+1);
                        // while(s.charAt(i)!=colo.charAt(0)){
            //     label+=s.charAt(i);
            //     i++;
            // }
            
        }
        else{
            temp=s;
        }
        String[] t2=temp.split(" ");
        if(t2.length==1){
            instr=t2[0];
        }
        else if(t2.length==2){
            instr=t2[0];
            
            String[] s1=t2[1].split(",");
            if(s1.length==1)
                op1=s1[0];
            else{
                op1=s1[0];
                op2=s1[1];
            }
        }
        
    ///////////////////////////////////////////////////////////////////    
        
        System.out.print("\n"+label+":\t");
        System.out.print(instr+"\t");
        System.out.print(op1+"\t");
        System.out.print(op2+"\t");

    ///////////////////////////////////////////////////////////////////

        if(IS.containsKey(instr)){
            hm=1;
            insprt=IS.get(instr);
            lc++;
            System.out.print(lc+"\t");
            System.out.print(insprt+"\t");
            temp1=String.valueOf(lc)+"\t"+insprt;
            if(op1.equals("AREG")){
                op1prt="(REG,01)";
                System.out.print(op1prt+"\t");
                temp2=temp1+" "+op1prt;
            }
            else if(op1.equals("BREG")){
                op1prt="(REG,02)";
                System.out.print(op1prt+"\t");
                temp2=temp1+" "+op1prt;
            }
            else if(op1.equals("CREG")){
                op1prt="(REG,03)";
                System.out.print(op1prt+"\t");
                temp2=temp1+" "+op1prt;
            }
            else{
                if(op1.contains("=")){
                    ltabc++;
                    op1prt="(LT,"+ltabc+")";
                    String tt[]=op1.split("'");
                    literaltab.put(tt[1],lc);
                    System.out.print(op1prt+"\t");
                    temp2=temp1+" "+op1prt;
                }
                else {
                    if(isNumeric(op1)){
                        op1prt="(c,"+op1+")";
                        System.out.print(op1prt+"\t");
                        temp2=temp1+" "+op1prt;
                    }
                    else if(op1!=""){
                        stc++;
                        op1prt="(ST,"+stc+")";
                        //String tt[]=op1.split("");
                        symboltab.put(op1,0);
                        System.out.print(op1prt+"\t");
                        temp2=temp1+" "+op1prt;
                    }
                }
            }
            if(op2.equals("AREG")){
                op2prt="(REG,01)";
                System.out.print(op2prt+"\t");
                temp3=temp2+" "+op2prt;
            }
            else if(op2.equals("BREG")){
                op2prt="(REG,02)";
                System.out.print(op2prt+"\t");
                temp3=temp2+" "+op2prt;
            }
            else if(op2.equals("CREG")){
                op2prt="(REG,03)";
                System.out.print(op2prt+"\t");
                temp3=temp2+" "+op2prt;
            }
            else{
                if(op2.contains("=")){
                    ltabc++;
                    op2prt="(LT,"+ltabc+")";
                    String tt[]=op2.split("'");
                    literaltab.put(tt[1],lc);
                    System.out.print(op2prt+"\t");
                    temp3=temp2+" "+op2prt;
                }
                else{
                    if(isNumeric(op2)){
                        op2prt="(c,"+op2+")";
                        System.out.print(op2prt+"\t");
                        temp3=temp2+" "+op2prt;
                    }
                    else if(op2!=""){
                        stc++;
                        op2prt="(ST,"+stc+")";
                        //String tt[]=op2.split("'");
                        symboltab.put(op2,0);
                        System.out.print(op2prt+"\t");
                        temp3=temp2+" "+op2prt;
                    }
                }
            }
            
        }
        else if(AD.containsKey(instr)){
            hm=2;
            if(instr.equals("START") && op1!=""){
                lc=Integer.parseInt(op1);
                lc--;
                //System.out.print(lc+"this\t");
            }
            insprt=AD.get(instr);
            System.out.print("\t"+insprt+"\t");
            temp3="\t"+insprt;
            //System.out.print(lc+"\t");
        }
        else if(DS.containsKey(instr)){
            hm=3;
            insprt=DS.get(instr);
            lc++;
            System.out.print(lc+"\t");
            System.out.print(insprt+"\t");
            temp1=String.valueOf(lc)+"\t"+insprt;
            if(op1.equals("AREG")){
                op1prt="(REG,01)";
                System.out.print(op1prt+"\t");
                temp2=temp1+" "+op1prt;
            }
            else if(op1.equals("BREG")){
                op1prt="(REG,02)";
                System.out.print(op1prt+"\t");
                temp2=temp1+" "+op1prt;
            }
            else if(op1.equals("CREG")){
                op1prt="(REG,03)";
                System.out.print(op1prt+"\t");
                temp2=temp1+" "+op1prt;
            }
            else{
                if(op2.contains("=")){
                    ltabc++;
                    String tt[]=op1.split("'");
                    literaltab.put(tt[1],lc);
                    op1prt="(LT,"+ltabc+")";
                    
                    System.out.print(op1prt+"\t");
                    temp3=temp2+" "+op1prt;
                }
                else{
                    if(isNumeric(op1)){
                        op1prt="(c,"+op1+")";
                        System.out.print(op1prt+"\t");
                        temp2=temp1+" "+op1prt;
                    }
                    else if(op1!=""){
                        stc++;
                        op1prt="(ST,"+stc+")";
                        //String tt[]=op1.split("'");
                        symboltab.put(op1,0);
                        System.out.print(op1prt+"\t");
                        temp2=temp1+" "+op1prt;
                    }
                }
            }
            if(op2.equals("AREG")){
                op2prt="(REG,01)";
                System.out.print(op2prt+"\t");
                temp3=temp2+" "+op2prt;
            }
            else if(op2.equals("BREG")){
                op2prt="(REG,02)";
                System.out.print(op2prt+"\t");
                temp3=temp2+" "+op2prt;
            }
            else if(op2.equals("CREG")){
                op2prt="(REG,03)";
                System.out.print(op2prt+"\t");
                temp3=temp2+" "+op2prt;
            }
            else{
                if(op2.contains("=")){
                    ltabc++;
                    String tt[]=op2.split("'");
                    literaltab.put(tt[1],lc);
                    op2prt="(LT,"+ltabc+")";
                    
                    System.out.print(op2prt+"\t");
                    temp3=temp2+" "+op2prt;
                }
                else{
                    if(isNumeric(op2)){
                        op2prt="(c,"+op2+")";
                        System.out.print(op2prt+"\t");
                        temp3=temp2+" "+op2prt;
                    }
                    else if(op2!=""){
                        stc++;
                        op2prt="(ST,"+stc+")";
                        //String tt[]=op2.split("'");
                        symboltab.put(op2,0);
                        System.out.print(op2prt+"\t");
                        temp3=temp2+" "+op2prt;
                    }
                }
            }
            
            
        }
        if(temp2==""){
            temp2=temp1;
        }
        if(temp3==""){
            temp3=temp2;
        }
        final1=temp3;
        //tuple towrite=new tuple(String.valueOf(lc),insprt,op1prt,op2prt);
        // System.out.print(insprt+"\t");
        // System.out.print(lc+"\t");

    //////////////////////////////////////////////////////////////////


        

    ///////////////////////////////////////////////////////////////////

        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("machinecode.txt",true));
            //String towrite=String.valueOf(lc) + ;
            out.write(final1+"\n");
            out.close();
            // FileOutputStream fileOut = new FileOutputStream("machinecode.txt");
            // ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
            // objectOut.writeObject(towrite);
            // objectOut.close();
        }
        catch (IOException e) {
            System.out.println("An error has occurred.");
            e.printStackTrace();
        }
        int[] p = {lc,ltabc,stc};
        return p;
    }
    void rdfl(){
        boolean flag=false;
        int ll=0,ltb=0,s=0;
        try {
            File Obj = new File("opcode.txt");
            Scanner Reader = new Scanner(Obj);
            while (Reader.hasNextLine()) {
                String data = Reader.nextLine();
                //System.out.println(data);
                //String[] chk=data.split(" ");
                // if(chk[0]=="START")
                //     flag=true;
                // if(flag==true)
                    int[] val=analyze(data,ll,ltb,s);
                    ll=val[0];
                    ltb=val[1];
                    s=val[2];
                // if(chk[0]=="END")
                //     flag=false;
            }
            Reader.close();
        }
        catch (FileNotFoundException e) {
            System.out.println("An error has occurred.");
            e.printStackTrace();
        }
    }
    public static void main(String[] args)
    {
 
        Pass1 p1=new Pass1();// File name specified
        p1.rdfl();
        System.out.println("");
        System.out.println(""+literaltab);
        System.out.println(""+symboltab);
    }
}

